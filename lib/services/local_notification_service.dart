import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/material.dart';

class LocalNotificationService {
  static final FlutterLocalNotificationsPlugin _notifications = FlutterLocalNotificationsPlugin();
  static bool _initialized = false;

  // Bildirim servisini baÅŸlat
  static Future<void> initialize() async {
    if (_initialized) return;

    // Android ayarlarÄ±
    const AndroidInitializationSettings androidSettings = AndroidInitializationSettings('@mipmap/ic_launcher');
    
    // iOS ayarlarÄ±
    const DarwinInitializationSettings iosSettings = DarwinInitializationSettings(
      requestAlertPermission: true,
      requestBadgePermission: true,
      requestSoundPermission: true,
    );

    const InitializationSettings settings = InitializationSettings(
      android: androidSettings,
      iOS: iosSettings,
    );

    await _notifications.initialize(
      settings,
      onDidReceiveNotificationResponse: _onNotificationTapped,
    );

    _initialized = true;
    print('âœ… Local Notification Service baÅŸlatÄ±ldÄ±');
  }

  // Bildirim tÄ±klama iÅŸleyicisi
  static void _onNotificationTapped(NotificationResponse response) {
    print('ðŸ”” Bildirime tÄ±klandÄ±: ${response.payload}');
    // Burada bildirim tÃ¼rÃ¼ne gÃ¶re yÃ¶nlendirme yapÄ±labilir
  }

  // Firebase mesajÄ±nÄ± sistem bildirimi olarak gÃ¶ster
  static Future<void> showNotification(RemoteMessage message) async {
    if (!_initialized) {
      await initialize();
    }

    final notification = message.notification;
    if (notification == null) return;

    const AndroidNotificationDetails androidDetails = AndroidNotificationDetails(
      'neurom_channel',
      'Neurom Bildirimleri',
      channelDescription: 'Neurom uygulamasÄ± bildirimleri',
      importance: Importance.high,
      priority: Priority.high,
      icon: '@mipmap/ic_launcher',
      color: Color(0xFF2196F3),
      playSound: true,
      enableVibration: true,
    );

    const DarwinNotificationDetails iosDetails = DarwinNotificationDetails(
      presentAlert: true,
      presentBadge: true,
      presentSound: true,
    );

    const NotificationDetails details = NotificationDetails(
      android: androidDetails,
      iOS: iosDetails,
    );

    await _notifications.show(
      message.hashCode, // Benzersiz ID
      notification.title,
      notification.body,
      details,
      payload: message.data.toString(),
    );

    print('ðŸ“± Sistem bildirimi gÃ¶sterildi: ${notification.title}');
  }

  // Test bildirimi gÃ¶ster
  static Future<void> showTestNotification() async {
    if (!_initialized) {
      await initialize();
    }

    const AndroidNotificationDetails androidDetails = AndroidNotificationDetails(
      'neurom_channel',
      'Neurom Bildirimleri',
      channelDescription: 'Neurom uygulamasÄ± bildirimleri',
      importance: Importance.high,
      priority: Priority.high,
      icon: '@mipmap/ic_launcher',
      color: Color(0xFF4CAF50),
      playSound: true,
      enableVibration: true,
    );

    const DarwinNotificationDetails iosDetails = DarwinNotificationDetails(
      presentAlert: true,
      presentBadge: true,
      presentSound: true,
    );

    const NotificationDetails details = NotificationDetails(
      android: androidDetails,
      iOS: iosDetails,
    );

    await _notifications.show(
      999, // Test ID
      'Test Bildirimi',
      'Neurom bildirim sistemi Ã§alÄ±ÅŸÄ±yor!',
      details,
      payload: 'test',
    );

    print('ðŸ§ª Test bildirimi gÃ¶sterildi');
  }

  // Bildirimleri temizle
  static Future<void> clearAllNotifications() async {
    await _notifications.cancelAll();
  }

  // Belirli bir bildirimi iptal et
  static Future<void> cancelNotification(int id) async {
    await _notifications.cancel(id);
  }
}

